var _user$project$Main$model = {
	mdl: _debois$elm_mdl$Material$model,
	currentTab: 0,
	currentBasket: {
		ctor: '_Tuple2',
		_0: '',
		_1: _elm_lang$core$Native_List.fromArray(
			[])
	},
	currentStore: {
		name: '',
		stock: 0,
		inventory: _elm_lang$core$Native_List.fromArray(
			[])
	},
	baskets: function () {
		var testdata = _elm_lang$core$Native_List.fromArray(
			[
				{
				amount: 4,
				item: {price: 3.75, name: 'Apples', img: ''},
				store: 'Walmart'
			},
				{
				amount: 6,
				item: {price: 4.21, name: 'Oranges', img: ''},
				store: 'Target'
			},
				{
				amount: 1,
				item: {price: 4.22, name: 'Milk', img: ''},
				store: 'Food Lion'
			}
			]);
		return _elm_lang$core$Native_List.fromArray(
			[
				{ctor: '_Tuple2', _0: 'All', _1: testdata}
			]);
	}(),
	stores: function () {
		var testdata = _elm_lang$core$Native_List.fromArray(
			[
				{
				name: 'Walmart',
				stock: 1,
				inventory: _elm_lang$core$Native_List.fromArray(
					[
						{price: 3.75, name: 'Apples', img: ''}
					])
			},
				{
				name: 'Target',
				stock: 1,
				inventory: _elm_lang$core$Native_List.fromArray(
					[
						{price: 4.21, name: 'Oranges', img: ''}
					])
			},
				{
				name: 'Food Lion',
				stock: 1,
				inventory: _elm_lang$core$Native_List.fromArray(
					[
						{price: 4.22, name: 'Milk', img: ''}
					])
			}
			]);
		var stock = A3(
			_elm_lang$core$List$foldl,
			F2(
				function (x, y) {
					return x + y;
				}),
			0,
			A2(
				_elm_lang$core$List$map,
				function (_) {
					return _.stock;
				},
				testdata));
		var inventory = A2(
			_elm_community$list_extra$List_Extra$uniqueBy,
			function (_) {
				return _.name;
			},
			A2(
				_elm_lang$core$List$sortBy,
				function (_) {
					return _.name;
				},
				A3(
					_elm_lang$core$List$foldl,
					F2(
						function (x, y) {
							return A2(_elm_lang$core$Basics_ops['++'], x, y);
						}),
					_elm_lang$core$Native_List.fromArray(
						[]),
					A2(
						_elm_lang$core$List$map,
						function (_) {
							return _.inventory;
						},
						testdata))));
		return A2(
			_elm_lang$core$List_ops['::'],
			{name: 'All', stock: stock, inventory: inventory},
			testdata);
	}()
};
var _user$project$Main$Model = F6(
	function (a, b, c, d, e, f) {
		return {mdl: a, currentTab: b, currentBasket: c, currentStore: d, baskets: e, stores: f};
	});
var _user$project$Main$Grocery = F3(
	function (a, b, c) {
		return {amount: a, item: b, store: c};
	});
var _user$project$Main$Store = F3(
	function (a, b, c) {
		return {name: a, stock: b, inventory: c};
	});
var _user$project$Main$Item = F3(
	function (a, b, c) {
		return {price: a, name: b, img: c};
	});
var _user$project$Main$SelectBasket = function (a) {
	return {ctor: 'SelectBasket', _0: a};
};
var _user$project$Main$SelectStore = function (a) {
	return {ctor: 'SelectStore', _0: a};
};
var _user$project$Main$SelectTab = function (a) {
	return {ctor: 'SelectTab', _0: a};
};
var _user$project$Main$Mdl = function (a) {
	return {ctor: 'Mdl', _0: a};
};
var _user$project$Main$view = function (model) {
	var main = function (_p0) {
		var _p1 = _p0;
		var _p3 = _p1._0;
		var _p2 = _p1._1;
		switch (_p2) {
			case 0:
				return _p3.stores;
			case 1:
				return _p3.groceries;
			case 2:
				return _p3.recipes;
			default:
				return A2(
					_elm_lang$html$Html$body,
					_elm_lang$core$Native_List.fromArray(
						[]),
					_elm_lang$core$Native_List.fromArray(
						[]));
		}
	};
	var pages = function () {
		var _p4 = model.currentBasket;
		var currentBasket = _p4._1;
		var buy = function (grocery) {
			var cost = grocery.item.price * grocery.amount;
			var amt = _elm_lang$core$Basics$toString(grocery.amount);
			var name = grocery.item.name;
			return A2(
				_elm_lang$core$Basics_ops['++'],
				amt,
				A2(
					_elm_lang$core$Basics_ops['++'],
					' ',
					A2(
						_elm_lang$core$Basics_ops['++'],
						name,
						A2(
							_elm_lang$core$Basics_ops['++'],
							' $',
							_elm_lang$core$Basics$toString(cost)))));
		};
		var stock = function (item) {
			return A2(
				_elm_lang$core$Basics_ops['++'],
				item.name,
				A2(
					_elm_lang$core$Basics_ops['++'],
					' - $',
					_elm_lang$core$Basics$toString(item.price)));
		};
		var format = function (list) {
			return A2(
				_debois$elm_mdl$Material_List$li,
				_elm_lang$core$Native_List.fromArray(
					[]),
				_elm_lang$core$Native_List.fromArray(
					[
						A2(
						_debois$elm_mdl$Material_List$content,
						_elm_lang$core$Native_List.fromArray(
							[]),
						list)
					]));
		};
		var inv = F2(
			function (cmd, item) {
				return format(
					_elm_lang$core$Native_List.fromArray(
						[
							_elm_lang$html$Html$text(
							cmd(item))
						]));
			});
		var basket = A2(
			_elm_lang$core$List$map,
			inv(buy),
			currentBasket);
		var inventory = A2(
			_elm_lang$core$List$map,
			inv(stock),
			function (_) {
				return _.inventory;
			}(model.currentStore));
		return {
			stores: A2(
				_debois$elm_mdl$Material_List$ul,
				_elm_lang$core$Native_List.fromArray(
					[]),
				inventory),
			groceries: A2(
				_debois$elm_mdl$Material_List$ul,
				_elm_lang$core$Native_List.fromArray(
					[]),
				basket),
			recipes: A2(
				_elm_lang$html$Html$body,
				_elm_lang$core$Native_List.fromArray(
					[]),
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html$text('Page 3')
					]))
		};
	}();
	var drawer = function () {
		var recipes = _elm_lang$core$Native_List.fromArray(
			[]);
		var basketlink = F2(
			function (i, _p5) {
				var _p6 = _p5;
				return A2(
					_debois$elm_mdl$Material_Layout$link,
					_elm_lang$core$Native_List.fromArray(
						[
							_debois$elm_mdl$Material_Layout$onClick(
							_user$project$Main$SelectBasket(i))
						]),
					_elm_lang$core$Native_List.fromArray(
						[
							_elm_lang$html$Html$text(_p6._0)
						]));
			});
		var baskets = A2(_elm_lang$core$List$indexedMap, basketlink, model.baskets);
		var storelink = F2(
			function (i, store) {
				return A2(
					_debois$elm_mdl$Material_Layout$link,
					_elm_lang$core$Native_List.fromArray(
						[
							_debois$elm_mdl$Material_Layout$onClick(
							_user$project$Main$SelectStore(i))
						]),
					_elm_lang$core$Native_List.fromArray(
						[
							_elm_lang$html$Html$text(store.name)
						]));
			});
		var stores = A2(_elm_lang$core$List$indexedMap, storelink, model.stores);
		var tab = model.currentTab;
		var _p7 = tab;
		switch (_p7) {
			case 0:
				return A2(
					_debois$elm_mdl$Material_Layout$navigation,
					_elm_lang$core$Native_List.fromArray(
						[]),
					stores);
			case 1:
				return A2(
					_debois$elm_mdl$Material_Layout$navigation,
					_elm_lang$core$Native_List.fromArray(
						[]),
					baskets);
			case 2:
				return A2(
					_debois$elm_mdl$Material_Layout$navigation,
					_elm_lang$core$Native_List.fromArray(
						[]),
					recipes);
			default:
				return A2(
					_debois$elm_mdl$Material_Layout$navigation,
					_elm_lang$core$Native_List.fromArray(
						[]),
					_elm_lang$core$Native_List.fromArray(
						[]));
		}
	}();
	var menu = A5(
		_debois$elm_mdl$Material_Menu$render,
		_user$project$Main$Mdl,
		_elm_lang$core$Native_List.fromArray(
			[0]),
		model.mdl,
		_elm_lang$core$Native_List.fromArray(
			[_debois$elm_mdl$Material_Menu$ripple, _debois$elm_mdl$Material_Menu$bottomRight]),
		_elm_lang$core$Native_List.fromArray(
			[
				A2(
				_debois$elm_mdl$Material_Menu$item,
				_elm_lang$core$Native_List.fromArray(
					[_debois$elm_mdl$Material_Menu$divider]),
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html$text('Add Item')
					])),
				A2(
				_debois$elm_mdl$Material_Menu$item,
				_elm_lang$core$Native_List.fromArray(
					[]),
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html$text('Add List')
					])),
				A2(
				_debois$elm_mdl$Material_Menu$item,
				_elm_lang$core$Native_List.fromArray(
					[]),
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html$text('Delete List')
					]))
			]));
	var header = A2(
		_debois$elm_mdl$Material_Layout$row,
		_elm_lang$core$Native_List.fromArray(
			[]),
		_elm_lang$core$Native_List.fromArray(
			[
				A2(
				_debois$elm_mdl$Material_Layout$title,
				_elm_lang$core$Native_List.fromArray(
					[]),
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html$text('Do My Groceries')
					])),
				_debois$elm_mdl$Material_Layout$spacer,
				menu
			]));
	var tabs = _elm_lang$core$Native_List.fromArray(
		[
			_elm_lang$html$Html$text('Stores'),
			_elm_lang$html$Html$text('Groceries'),
			_elm_lang$html$Html$text('Recipes')
		]);
	return A3(
		_debois$elm_mdl$Material_Scheme$topWithScheme,
		_debois$elm_mdl$Material_Color$Blue,
		_debois$elm_mdl$Material_Color$Amber,
		A4(
			_debois$elm_mdl$Material_Layout$render,
			_user$project$Main$Mdl,
			model.mdl,
			_elm_lang$core$Native_List.fromArray(
				[
					_debois$elm_mdl$Material_Layout$fixedHeader,
					_debois$elm_mdl$Material_Layout$fixedDrawer,
					_debois$elm_mdl$Material_Layout$selectedTab(model.currentTab),
					_debois$elm_mdl$Material_Layout$onSelectTab(_user$project$Main$SelectTab)
				]),
			{
				header: _elm_lang$core$Native_List.fromArray(
					[header]),
				drawer: _elm_lang$core$Native_List.fromArray(
					[drawer]),
				tabs: {
					ctor: '_Tuple2',
					_0: tabs,
					_1: _elm_lang$core$Native_List.fromArray(
						[
							_debois$elm_mdl$Material_Color$background(
							A2(_debois$elm_mdl$Material_Color$color, _debois$elm_mdl$Material_Color$Amber, _debois$elm_mdl$Material_Color$A700))
						])
				},
				main: _elm_lang$core$Native_List.fromArray(
					[
						main(
						{ctor: '_Tuple2', _0: pages, _1: model.currentTab})
					])
			}));
};
var _user$project$Main$controller = F2(
	function (msg, model) {
		var _p8 = msg;
		switch (_p8.ctor) {
			case 'Mdl':
				return A2(_debois$elm_mdl$Material$update, _p8._0, model);
			case 'SelectTab':
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_elm_lang$core$Native_Utils.update(
						model,
						{currentTab: _p8._0}),
					_elm_lang$core$Native_List.fromArray(
						[]));
			case 'SelectStore':
				var cmd = _debois$elm_mdl$Material_Helpers$cmd(
					_debois$elm_mdl$Material_Layout$toggleDrawer(_user$project$Main$Mdl));
				var currentStore = A2(
					_elm_lang$core$Maybe$withDefault,
					model.currentStore,
					A2(_elm_community$list_extra$List_Extra_ops['!!'], model.stores, _p8._0));
				var $new = _elm_lang$core$Native_Utils.update(
					model,
					{currentStore: currentStore});
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					$new,
					_elm_lang$core$Native_List.fromArray(
						[cmd]));
			default:
				var cmd = _debois$elm_mdl$Material_Helpers$cmd(
					_debois$elm_mdl$Material_Layout$toggleDrawer(_user$project$Main$Mdl));
				var currentBasket = A2(
					_elm_lang$core$Maybe$withDefault,
					model.currentBasket,
					A2(_elm_community$list_extra$List_Extra_ops['!!'], model.baskets, _p8._0));
				var $new = _elm_lang$core$Native_Utils.update(
					model,
					{currentBasket: currentBasket});
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					$new,
					_elm_lang$core$Native_List.fromArray(
						[cmd]));
		}
	});
var _user$project$Main$main = {
	main: function () {
		var subs = function (model) {
			return _elm_lang$core$Platform_Sub$batch(
				_elm_lang$core$Native_List.fromArray(
					[
						A2(_debois$elm_mdl$Material$subscriptions, _user$project$Main$Mdl, model)
					]));
		};
		var init = A2(
			_elm_lang$core$Platform_Cmd_ops['!'],
			_user$project$Main$model,
			_elm_lang$core$Native_List.fromArray(
				[
					_debois$elm_mdl$Material$init(_user$project$Main$Mdl)
				]));
		return _elm_lang$html$Html_App$program(
			{init: init, subscriptions: subs, update: _user$project$Main$controller, view: _user$project$Main$view});
	}()
};

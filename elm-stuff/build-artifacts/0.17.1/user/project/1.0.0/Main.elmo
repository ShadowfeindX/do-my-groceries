var _user$project$Main$stylesheet = _debois$elm_mdl$Material_Options$stylesheet('\n  /* The following line is better done in html. We keep it here for\n     compatibility with elm-reactor.\n   */\n  @import url(\"assets/highlight/github-gist.css\");\n\n  blockquote:before { content: none; }\n  blockquote:after { content: none; }\n  blockquote {\n    border-left-style: solid;\n    border-width: 1px;\n    padding-left: 1.3ex;\n    border-color: rgb(255,82,82);\n      /* Really need a way to specify \"secondary color\" in\n         inline css.\n       */\n    font-style: normal;\n  }\n  p, blockquote {\n    max-width: 40em;\n  }\n\n  pre {\n    display: inline-block;\n    box-sizing: border-box;\n    min-width: 100%;\n    padding-top: .5rem;\n    padding-bottom: 1rem;\n    padding-left:1rem;\n    margin: 0;\n  }\n  code {\n    font-family: \'Roboto Mono\';\n  }\n  .mdl-layout__header--transparent {\n    background: url(\'https://getmdl.io/assets/demos/transparent.jpg\') center / cover;\n  }\n  .mdl-layout__header--transparent .mdl-layout__drawer-button {\n    /* This background is dark, so we set text to white. Use 87% black instead if\n       your background is light. */\n    color: white;\n  }\n');
var _user$project$Main$header = function (model) {
	return _elm_lang$core$Native_List.fromArray(
		[
			A2(
			_debois$elm_mdl$Material_Layout$row,
			_elm_lang$core$Native_List.fromArray(
				[
					A2(_debois$elm_mdl$Material_Options$css, 'transition', 'height 333ms ease-in-out 0s')
				]),
			_elm_lang$core$Native_List.fromArray(
				[
					A2(
					_debois$elm_mdl$Material_Layout$title,
					_elm_lang$core$Native_List.fromArray(
						[]),
					_elm_lang$core$Native_List.fromArray(
						[
							_elm_lang$html$Html$text('elm-mdl')
						])),
					_debois$elm_mdl$Material_Layout$spacer,
					A2(
					_debois$elm_mdl$Material_Layout$navigation,
					_elm_lang$core$Native_List.fromArray(
						[]),
					_elm_lang$core$Native_List.fromArray(
						[
							A2(
							_debois$elm_mdl$Material_Layout$link,
							_elm_lang$core$Native_List.fromArray(
								[
									_debois$elm_mdl$Material_Layout$href('https://github.com/debois/elm-mdl')
								]),
							_elm_lang$core$Native_List.fromArray(
								[
									_debois$elm_mdl$Material_Icon$i('photo')
								])),
							A2(
							_debois$elm_mdl$Material_Layout$link,
							_elm_lang$core$Native_List.fromArray(
								[
									_debois$elm_mdl$Material_Layout$href('https://github.com/debois/elm-mdl')
								]),
							_elm_lang$core$Native_List.fromArray(
								[
									A2(
									_elm_lang$html$Html$span,
									_elm_lang$core$Native_List.fromArray(
										[]),
									_elm_lang$core$Native_List.fromArray(
										[
											_elm_lang$html$Html$text('github')
										]))
								])),
							A2(
							_debois$elm_mdl$Material_Layout$link,
							_elm_lang$core$Native_List.fromArray(
								[
									_debois$elm_mdl$Material_Layout$href('http://package.elm-lang.org/packages/debois/elm-mdl/latest/')
								]),
							_elm_lang$core$Native_List.fromArray(
								[
									_elm_lang$html$Html$text('elm-package')
								]))
						]))
				]))
		]);
};
var _user$project$Main$update = F2(
	function (action, model) {
		var _p0 = action;
		if (_p0.ctor === 'Mdl') {
			return A2(_debois$elm_mdl$Material$update, _p0._0, model);
		} else {
			return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
		}
	});
var _user$project$Main$model = {mdl: _debois$elm_mdl$Material$model, tab: 0};
var _user$project$Main$Model = F2(
	function (a, b) {
		return {mdl: a, tab: b};
	});
var _user$project$Main$Mdl = function (a) {
	return {ctor: 'Mdl', _0: a};
};
var _user$project$Main$drawer = _elm_lang$core$Native_List.fromArray(
	[
		A2(
		_debois$elm_mdl$Material_Layout$title,
		_elm_lang$core$Native_List.fromArray(
			[]),
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$html$Html$text('Example drawer')
			])),
		A2(
		_debois$elm_mdl$Material_Layout$navigation,
		_elm_lang$core$Native_List.fromArray(
			[]),
		_elm_lang$core$Native_List.fromArray(
			[
				A2(
				_debois$elm_mdl$Material_Layout$link,
				_elm_lang$core$Native_List.fromArray(
					[
						_debois$elm_mdl$Material_Layout$href('https://github.com/debois/elm-mdl')
					]),
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html$text('github')
					])),
				A2(
				_debois$elm_mdl$Material_Layout$link,
				_elm_lang$core$Native_List.fromArray(
					[
						_debois$elm_mdl$Material_Layout$href('http://package.elm-lang.org/packages/debois/elm-mdl/latest/')
					]),
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html$text('elm-package')
					])),
				A2(
				_debois$elm_mdl$Material_Layout$link,
				_elm_lang$core$Native_List.fromArray(
					[
						_debois$elm_mdl$Material_Layout$href('#cards'),
						_debois$elm_mdl$Material_Layout$onClick(
						_debois$elm_mdl$Material_Layout$toggleDrawer(_user$project$Main$Mdl))
					]),
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html$text('Card component')
					]))
			]))
	]);
var _user$project$Main$SelectTab = function (a) {
	return {ctor: 'SelectTab', _0: a};
};
var _user$project$Main$view = function (model) {
	var top = _elm_lang$html$Html$text('Hello from Elm!');
	return function (contents) {
		return A2(
			_elm_lang$html$Html$div,
			_elm_lang$core$Native_List.fromArray(
				[]),
			_elm_lang$core$Native_List.fromArray(
				[
					A3(_debois$elm_mdl$Material_Scheme$topWithScheme, _debois$elm_mdl$Material_Color$Blue, _debois$elm_mdl$Material_Color$Amber, contents),
					A3(
					_elm_lang$html$Html$node,
					'script',
					_elm_lang$core$Native_List.fromArray(
						[
							A2(_elm_lang$html$Html_Attributes$attribute, 'src', 'https://cdn.polyfill.io/v2/polyfill.js?features=Event.focusin')
						]),
					_elm_lang$core$Native_List.fromArray(
						[])),
					A3(
					_elm_lang$html$Html$node,
					'script',
					_elm_lang$core$Native_List.fromArray(
						[
							A2(_elm_lang$html$Html_Attributes$attribute, 'src', 'assets/highlight/highlight.pack.js')
						]),
					_elm_lang$core$Native_List.fromArray(
						[]))
				]));
	}(
		A4(
			_debois$elm_mdl$Material_Layout$render,
			_user$project$Main$Mdl,
			model.mdl,
			_elm_lang$core$Native_List.fromArray(
				[
					_debois$elm_mdl$Material_Layout$selectedTab(model.tab),
					_debois$elm_mdl$Material_Layout$onSelectTab(_user$project$Main$SelectTab),
					_debois$elm_mdl$Material_Layout$fixedHeader,
					_debois$elm_mdl$Material_Layout$fixedTabs,
					_debois$elm_mdl$Material_Layout$scrolling
				]),
			{
				header: _user$project$Main$header(model),
				drawer: _user$project$Main$drawer,
				tabs: {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_List.fromArray(
						[]),
					_1: _elm_lang$core$Native_List.fromArray(
						[])
				},
				main: _elm_lang$core$Native_List.fromArray(
					[_user$project$Main$stylesheet, top])
			}));
};
var _user$project$Main$main = {
	main: function () {
		var subscriptions = function (model) {
			return _elm_lang$core$Platform_Sub$batch(
				_elm_lang$core$Native_List.fromArray(
					[
						A2(_debois$elm_mdl$Material$subscriptions, _user$project$Main$Mdl, model)
					]));
		};
		var init = {
			ctor: '_Tuple2',
			_0: _elm_lang$core$Native_Utils.update(
				_user$project$Main$model,
				{
					mdl: A2(_debois$elm_mdl$Material_Layout$setTabsWidth, 2124, _user$project$Main$model.mdl)
				}),
			_1: _debois$elm_mdl$Material$init(_user$project$Main$Mdl)
		};
		return _elm_lang$html$Html_App$program(
			{init: init, view: _user$project$Main$view, subscriptions: subscriptions, update: _user$project$Main$update});
	}()
};
